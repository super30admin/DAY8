// Time Complexity : O(m x n)
// Space Complexity : O(m x n)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach


class Solution {
    public int change(int amount, int[] coins) {
        if(coins == null) return 0;
        // if(coins.length == 1){
        //     if(coins[0] != amount) return 0;
        // }
        int [][] mat = new int [coins.length + 1][amount + 1];
        // fill first row with 1's
        for(int j = 0; j < mat.length; j++){
            mat[j][0] = 1;
        }
        //two loops to fill the matrix in
        for(int i = 1; i < mat.length; i++ ){ //row's for loop
            for(int x = 1; x < mat[0].length; x++){ //col's loop
                if(x < coins[i - 1]){ // only copy if coin's value is greater than amount
                    mat[i][x] = mat[i-1][x]; //row before and same col
                }
                else{
                    mat[i][x] = mat[i-1][x] + mat[i][x - coins[i - 1]]; // grab path from top and then grab path from before and add
                }
            }
        } 
        return mat[mat.length - 1][mat[0].length - 1];
    }
}