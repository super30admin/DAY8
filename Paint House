// Time Complexity : O(N)
// Space Complexity : O(1) 
// Did this code successfully run on Leetcode : N/A
// Any problem you faced while coding this : Approach was not intuitive.


// Your code here along with comments explaining your approach :  
//Idea is to update the current 2D-array/matrix by making decision from previous row minimum values of other columns
SOLUTION:

public class PaintHouse {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[][] arr = new int[][]{{17,5,2},
							  {23,19,1},
							  {16,2,23}
							};

		System.out.println("Minimum Cost to paint House is: $" + helper(arr));	
	}
	
	private static int helper(int[][] arr) {
			
			//We are modifying the same array by updating it's values from previous row Min value.
			for(int i = 1 ; i < arr.length; i++) {
				arr[i][0] = arr[i][0] + Math.min(arr[i-1][1], arr[i-1][2]);
				arr[i][1] = arr[i][1] + Math.min(arr[i-1][0], arr[i-1][2]);
				arr[i][2] = arr[i][2] + Math.min(arr[i-1][0], arr[i-1][1]);
				
				System.out.println(" " + arr[i][0] + "  " +  arr[i][1] + " " + arr[i][2]);
			}
			
			return Math.min(arr[arr.length-1][0], Math.min(arr[arr.length-1][1], arr[arr.length-1][2]));
	}

}
