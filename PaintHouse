/*BRUTE FORCE
//TC: EXPONENTIAL
class Solution {
    public int minCost(int[][] costs) {
        if (costs==null || costs.length == 0) return 0;
        int red = helper(costs, 0, 0, 0);
        int blue = helper(costs, 0, 1, 0);
        int green = helper(costs, 0, 2, 0);
        return Math.min(red, (Math.min(blue,green)));
    }
    private int helper(int[][] costs,int row,int color,int sum){
        //base
        if (row == costs.length) return sum;
        //logic
        //for red
        if (color==0) {
            return Math.min(helper(costs,row+1, 1, sum+costs[row][0]), 
                            helper(costs,row+1,2,sum+costs[row][0]));
        }
        if (color==1) {
             return Math.min(helper(costs,row+1, 0, sum+costs[row][1]), 
                             helper(costs,row+1,2,sum+costs[row][1])); 
        }
         if (color==2) {
             return Math.min(helper(costs,row+1, 0, sum+costs[row][2]), 
                             helper(costs,row+1,1,sum+costs[row][2])); 
        }
        
      return 000;
    }
} */

//TC:O(n)
//SC: O(1)
//Passed on leetcode: yes
class Solution {
     public int minCost(int[][] costs) {
         if (costs==null || costs.length == 0) return 0;
         
        for(int i = costs.length-2;i>=0;i--) { //starts from last but one row , bottom up
            costs[i][0] += Math.min(costs[i+1][1],costs[i+1][2]); //min of the other colors next row
            costs[i][1] += Math.min(costs[i+1][0],costs[i+1][2]);
            costs[i][2] += Math.min(costs[i+1][0],costs[i+1][1]);
        }
         return Math.min(costs[0][0],Math.min(costs[0][1],costs[0][2])); //result will be the min in first row
    }
}












