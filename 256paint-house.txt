256. Paint House
There are a row of n houses, each house can be painted with one of the three colors: red, blue or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by a n x 3 cost matrix. For example, costs[0][0] is the cost of painting house 0 with color red; costs[1][2] is the cost of painting house 1 with color green, and so on... Find the minimum cost to paint all houses.

Note:
All costs are positive integers.

Example:

Input: [[17,2,17],[16,16,5],[14,3,19]]
Output: 10
Explanation: Paint house 0 into blue, paint house 1 into green, paint house 2 into blue.
             Minimum cost: 2 + 5 + 3 = 10.


  /* Time complexity= n*3
    Space complexity= n*3 */


Solution
///////////////////////////////////
class Solution {

 public int minCost(int[][] costs) {
        int[] dp = new int[3];
        for(int index = 0; index < 3; index++) {
            dp[index] = costs[costs.length - 1][index];
        }

        for(int row = costs.length - 2; row >= 0; row--) {
            int temp0 = dp[0];
            int temp1 = dp[1];
            int min = 0;
            for(int col = 0 ; col< 3; col++) {
                if(col == 0){
                    min = Math.min(temp1, dp[2]);
                }
                if(col == 1) {
                    min = Math.min(temp0, dp[2]);
                }

                if(col == 2) {
                    min = Math.min(temp0, temp1);
                }
                dp[col] = costs[row][col] + min;
            }
        }

        int minCost = Integer.MAX_VALUE;
        for(int index = 0; index < costs[0].length; index++){
            minCost = Math.min(minCost, dp[index]);
        }

        return minCost;
    }
}