# Time Complexity : O(n*m), n is number of distinct coin denomations and m is the amount
# Space Complexity : O(n*m)
# Did this code successfully run on LeetCode : Yes
# Any problem you faced while coding this : No

class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        
        dp = [[0] * (amount+1)] * (len(coins) + 1)
        
        for i in range(1):
            for j in range(len(dp[0])):
                if i == 0:
                    dp[i][j] = 0
                if j == 0:
                    dp[i][j] = 1
                    
        for i in range(1, len(dp)):
            for j in range(1, len(dp[0])):
                if coins[i-1] <= j:
                    dp[i][j] = dp[i][j-coins[i-1]] + dp[i-1][j]
                else:
                    dp[i][j] = dp[i-1][j]
                    
        return dp[-1][-1]