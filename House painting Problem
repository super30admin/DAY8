Approach 1 : Brute force (Tree Structure - Top to bottom approach)
Time complexity : O(2^n) ---- > No of colors * 2^ no of houses
Space Complexity : O(n) ---- > Max recursive stack depth
class Solution:
    def minCost(self, costs: List[List[int]]) -> int:
        def helper(row,last_color):
            if row==len(costs):
                return 0
            cost=float('inf')
            for color in range(3):
                if color!=last_color:
                    cost=min(cost,costs[row][color] + helper (row + 1, color))
            return cost
        
        return helper(0,-1)
        
   Approach 2 : DP 
   Time complexity : O(A*n) - O(n) A - No of colors
   space complexity : O(n) ---> storing one row at any time in an array 
   class Solution:
    def minCost(self, costs: List[List[int]]) -> int:
        ### Edge Case ##
        if costs==[] or len(costs)==0 :
            return 0
        n=len(costs)
        for i in range(1,n):
            ### Choose red
            costs[i][0]=costs[i][0]+min(costs[i-1][1],costs[i-1][2])
            ## Choose blue
            costs[i][1]=costs[i][1]+min(costs[i-1][0],costs[i-1][2])
            ## choose green
            costs[i][2]=costs[i][2]+min(costs[i-1][0],costs[i-1][1])
    
        return min(costs[n-1][0],costs[n-1][1],costs[n-1][2])
   
