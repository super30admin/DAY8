// Time Complexity : o( nm)
// Space Complexity : o(nm)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : no


// Your code here along with comments explaining your approach
/*
*  At any coin, can pick or cannot pick.
*  Create a 2-D dp array.
*  no of coins till coin i with target amount j  = sum of
*        1. no. of coins till  i with target amount j - coin value
*        2. no. of coins till  i-1 with target amount j
* */

class Solution {
    public int change(int amount, int[] coins) {
        int n = coins.length + 1;
        int m = amount +1;
        int dp[][] = new int[n][m];
        dp[0][0] = 1;
        for(int i = 0; i< n ; i++){
            dp[i][0] =1;
        }
        for(int i = 1; i< n ; i++){
            for(int j = 1; j < m; j++){

                int coinsIdx = i-1;
                if(j < coins[coinsIdx]){
                    dp[i][j] = dp[i-1][j];
                } else {
                    dp[i][j] = dp[i-1][j] + dp[i][j - coins[coinsIdx]];
                }

            }
        }
        return dp[n-1][m-1];
    }

}