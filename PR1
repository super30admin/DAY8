// Time Complexity : O(3* n) - where n is the number number of houses and 3 is the number of colors
// Space Complexity : O(1) - no extra space
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No
// Your code here along with comments explaining your approach: The approach is to incrementally move from one house to the other and while choosing, we pick the minimum of the two choices and move forward.

class Solution {
    public int minCost(int[][] costs) {
         if(costs==null || costs.length==0) return 0;
        int n=costs.length;
         for(int i=1;i<costs.length;i++){
             costs[i][0]=costs[i][0]+Math.min(costs[i-1][1],costs[i-1][2]);
             costs[i][1]=costs[i][1]+Math.min(costs[i-1][0],costs[i-1][2]);
             costs[i][2]=costs[i][2]+Math.min(costs[i-1][0],costs[i-1][1]);
            
         }
        return Math.min(costs[n-1][0],Math.min(costs[costs.length-1][1],costs[costs.length-1][2]));
    
        
    }
}
// Time Complexity : O(3*(2^n)) where 3 is the number of colors and n is the number of houses. At each house we have 2 choices.
// Space Complexity : O(n) - where n is the number of houses. A successful path will have one color from each house.
// Did this code successfully run on Leetcode : No, it receives a Time limit exceeded for large values of n
// Any problem you faced while coding this : No
// Your code here along with comments explaining your approach: The approach is to find all the paths and their minimums and return the best case.


class Solution {
    public int minCost(int[][] costs) {
        if(costs==null || costs.length==0) return 0;
        int case1=helper(costs,0,0,0);
        int case2=helper(costs,0,0,1);
        int case3=helper(costs,0,0,2);
        return Math.min(case1,Math.min(case1,case2));
        
    }
    public int helper(int[][] costs,int min,int row,int lastColor){
        //base
        if(row==costs.length) return min;
        //logic
        int case1=Integer.MAX_VALUE;
        int case2=Integer.MAX_VALUE;
        int case3=Integer.MAX_VALUE;
        
        if(lastColor==0){
            case1=Math.min(
                  helper(costs,min+costs[row][1], row+1,1),
                  helper(costs,min+costs[row][2], row+1,2)
                  );
        }
        if(lastColor==1){
            case1=Math.min(
                  helper(costs,min+costs[row][0], row+1,0),
                  helper(costs,min+costs[row][2], row+1,2)
                  );
        }
        if(lastColor==2){
            case1=Math.min(
                  helper(costs,min+costs[row][1], row+1,1),
                  helper(costs,min+costs[row][0], row+1,0)
                  );
        }
        return Math.min(case1,Math.min(case1,case2));
    }
}