//Time Complexity : O(N)
//Space Complexity : O(1)
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

class Solution {
    public int minCost(int[][] costs) {
        if(costs==null || costs.length==0) return 0;
        int n = costs.length;
        //store last row values in red 0th column,blue 1st column & last column green
        int costR = costs[n-1][0];
        int costB = costs[n-1][1];
        int costG = costs[n-1][2];
        for(int i = n-2; i >= 0; i--){
            //store the initial values of red and blue in temp so that when         manipulated we will have old values
            int tempR = costR;
            int tempB = costB;
            //add the values of next row  + with minimum between other two colors of previous row 
            costR = costs[i][0]+Math.min(costG,costB);
            costB = costs[i][1]+Math.min(tempR,costG);
            costG = costs[i][2]+Math.min(tempR,tempB);
        }
        // all values will be in first row then return the minimum
        return Math.min(costR,Math.min(costB,costG));
    }
}
