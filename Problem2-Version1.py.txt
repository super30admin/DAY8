# Time Complexity : O(m*2^n), where m is the amount required and n is the number of distinct coin denominations
# Space Complexity : O(m+n)
# Did this code successfully run on LeetCode : Yes
# Any problem you faced while coding this : Base case order in recursive function is a little confusing

class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        return self.helper(coins, amount, len(coins)-1)
        
    def helper(self, coins, amount, index):
        if amount == 0 and index == -1:
            return 1
        if amount < 0 or index < 0:
            return 0
        return self.helper(coins, amount - coins[index], index) + self.helper(coins, amount, index - 1)