Time complexity: O(m*n)--> with n being 3(Red, Blue,Green) , over all time complexity is O(3n)~O(n)
Space complexity: O(m*n)
Challenges faced:  Finding i and j right.
 
Approach: To calculate the path, Sart from last row in the array, if color is red(0); if value in the next row is (1<2) then path should be 1;
Do this for colors green(1) and blue(2).

package interview2;

import java.util.Arrays;

public class TestClass {
	
	public static void main(String[] args) {
		int[][] matrix = new int[3][3];
		
		// Initialize the matrix with values
		matrix[0][0] = 1;
		matrix[0][1] = 2;
		matrix[0][2] = 3;
		matrix[1][0] = 4;
		matrix[1][1] = 5;
		matrix[1][2] = 6;
		matrix[2][0] = 7;
		matrix[2][1] = 8;
		matrix[2][2] = 9;				
		
		//length of the input string.
		int n=3;
		int[][] dp=new int[n][3];
		int[][] path=new int[n][3];
			
		for(int j=0;j<3;j++) {
			dp[n-1][j]=matrix[n-1][j];
		}	
		
		System.out.println(dp[0]+ " "+ dp[1]+ " "+dp[2]);
		
		for(int i=n-2;i>=0;i--) {
			for(int j=0;j<3;j++) {
				if(dp[i+1][1]<dp[i+1][2]) {
					dp[i][0]=matrix[i][0]+dp[i+1][1];		
					path[i][0] = 1; 
				}else {
					dp[i][0]=matrix[i][0]+dp[i+1][2];
					path[i][0] = 2;
				}
				
				if(dp[i+1][0]<dp[i+1][2]) {
					dp[i][1]=matrix[i][1]+dp[i+1][0];
					path[i][1] = 0;
				}
				else{
					dp[i][1]=matrix[i][1]+dp[i+1][2];
					path[i][1] = 2;
				}
				
				if(dp[i+1][0]<dp[i+1][1]) {
					dp[i][2]=matrix[i][2]+dp[i+1][0];
					path[i][2] = 0;
				}else {
					dp[i][2]=matrix[i][2]+dp[i+1][1];
					path[i][2] = 1;
				}
			}
		}
		
		System.out.println(Math.min(dp[0][0], Math.min(dp[0][1], dp[0][2])));
		System.out.println(Arrays.deepToString(path));
		System.out.println(Arrays.deepToString(dp));
	}
}
