class Solution:
    # def change(self, amount: int, coins: List[int]) -> int:
    #     if coins==None or len(coins)==0:
    #         return 0
    #     return self.recurse(coins, amount,0)
    # def recurse(self, coins: List[int], amount: int,index:int) -> int:
    #     #base case
    #     if index == len(coins) or amount<0:
    #         return 0
    #     if amount ==0:
    #         return 1
    #     #logic
    #     #donot choose current coin
    #     case1=self.recurse(coins,amount,index+1)
    #     #choose current coin
    #     case2=self.recurse(coins,amount-coins[index],index)
    #     return case1+case2
    def change(self, amount: int, coins: List[int]) -> int:
        if coins==None or len(coins)==0:
            return 0
        m=len(coins)
        n=amount
        dp=[[0 for j in range(n+1)] for i in range(m+1)]
        print(dp)
        for i in range(m+1):
            dp[i][0]=1
        #acess from 1st row , 1st column
        for i in range(1,m+1):
            for j in range(1,n+1):
                if j<coins[i-1]:
                    #dnt choose case , zero case is right above
                    dp[i][j]=dp[i-1][j]
                else:
                    # zero +one case
                    dp[i][j]=dp[i-1][j]+dp[i][j-coins[i-1]]
        return dp[m][n]
TC-O(MN)
SC-O(MN)
