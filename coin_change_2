// Time Complexity : O(M * N)
// Space Complexity : O(M * N)
// Did this code successfully run in leetcode : Yes
// Any problems faced : No
// Approach
/*
Store all the ways to make up the amount by considering particular coin and not considering that.
Ways to make up the amount by not considering that coin will be present right above
Ways to make up the amount by considering that coin will be present on the same row by moving value of coin's steps back
*/

class Solution {
public:
    int change(int amount, vector<int>& coins) {
        vector<vector<int>> dp(coins.size() + 1, vector<int> (amount + 1, 0));
        for(int i = 0; i < dp.size(); i++) {
            dp[i][0] = 1;
        }
        for(int i = 1; i < dp.size(); i++) {
            for(int j = 1; j < dp[0].size(); j++) {
                if(j < coins[i - 1]) {
                    dp[i][j] = dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j] + dp[i][j - coins[i - 1]];
                }
            }
        }
        return dp[coins.size()][amount];
    }
};