Time Complexity:O(n) , n=number of coins
Space complexity: O(m*n): n =coins and m =amount
Challenges: 

Approach: To find possible ways to get the change , maintain a dp matrix. Solve smaller sub problems before attaining the solution for actual problem.
If coin denomination is less than the amount then traverse through and get possible ways for the denomination less than it.
If the coin denomination is higher than the amount then sum (amount-coin denomination) and previous coin denominations.
class Solution {
    public int change(int amount, int[] coins) {
        int dp[][]=new int[coins.length+1][amount+1];
        dp[0][0]=1;      

        // for(int i=0;i<=amount;i++){
        //     dp[0][i]=0;
        // }

        for(int i=1;i<=coins.length;i++){
            for(int j=0;j<=amount;j++){
                if(j<coins[i-1]){
                    dp[i][j]=dp[i-1][j];
                }
                else{
                    dp[i][j]=dp[i-1][j]+dp[i][j-coins[i-1]];
                }
            }   
        }
        return dp[coins.length][amount];
    }
}