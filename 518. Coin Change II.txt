class Solution:
    def change(self, amount: int, coins: List[int]) -> int:
        if coins==None or len(coins)==0:
            return -1
	#with recurssion TC-O(2powerN)
        def helper(amount,coins,index):
                if amount==0:
                    return 1
                if amount<0 or index==len(coins):
                    return 0
                c1=helper(amount,coins,index+1)
                c2=helper(amount-coins[index],coins,index)
                return c1+c2
        return helper(amount,coins,0)
	#method-2 TC-O(mn) S-O(mn)
        n=len(coins)
        m=amount
        dp=[[0 for x in range(amount+1)] for y in range(n+1)]
        
        dp[0][0]=1
        for j in range(1,n+1):
            dp[j][0]=1
        for i in range(1,n+1):
            for j in range(1,m+1):
                if (j<coins[i-1]):
                    dp[i][j]=dp[i-1][j]
                else:
                    dp[i][j]=dp[i-1][j]+dp[i][j-coins[i-1]]
        if dp[n][m]==0:
            return 0
        else:
            return dp[n][m]
        