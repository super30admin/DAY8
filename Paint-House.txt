class Solution:
    def minCost(self, costs: List[List[int]]) -> int:
    #     if costs==None or len(costs)==0:
    #         return 0
    #     costred=self.recurse(costs,0,0,0)
    #     costblue=self.recurse(costs,1,0,0)
    #     costgreen=self.recurse(costs,2,0,0)
    #     return min(costred,costblue,costgreen)
    
    # def recurse(self,costs:List[List[int]],color:int,row:int,amount:int)->int:
    #     #base
    #     if row==len(costs):
    #         return amount
    #     #logic
    #     if color==0:
    #         return min(self.recurse(costs,1,row+1,amount+costs[row][0]),
    #         self.recurse(costs,2,row+1,amount+costs[row][0]))
    #     elif color==1:
    #         return min(self.recurse(costs,0,row+1,amount+costs[row][1]),
    #         self.recurse(costs,2,row+1,amount+costs[row][1]))
    #     else:
    #         return min(self.recurse(costs,0,row+1,amount+costs[row][2]),
    #         self.recurse(costs,1,row+1,amount+costs[row][2]))
        if costs==None or len(costs)==0:
            return 0
        n=len(costs)
        for i in range(n-2,-1,-1):
            costs[i][0]=costs[i][0]+min(costs[i+1][1],costs[i+1][2])
            costs[i][1]=costs[i][1]+min(costs[i+1][0],costs[i+1][2])
            costs[i][2]=costs[i][2]+min(costs[i+1][0],costs[i+1][1])
        return min(costs[0][0],costs[0][1],costs[0][2])
TC-O(N) SC-O(1)